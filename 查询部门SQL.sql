
SELECT * FROM SYSTEM_DEPART;

SELECT * FROM SYSTEM_USER AS U;

SELECT * FROM SYSTEM_OFFICE;

SELECT * FROM SYSTEM_OFFICE_DEPART;


/** 1、**查询和机构关联的部门 **/
SELECT * FROM SYSTEM_DEPART AS D 
WHERE D.SYSTEM_OFFICE_ID IN (SELECT ID FROM SYSTEM_OFFICE WHERE ID = 2);

SELECT * FROM SYSTEM_DEPART AS D 
INNER JOIN SYSTEM_OFFICE O ON O.ID = D.SYSTEM_OFFICE_ID
WHERE D.SYSTEM_OFFICE_ID = 2

/** 2、查询开发部门的子部门 **/
SELECT T2.* FROM SYSTEM_DEPART AS T1 INNER JOIN SYSTEM_DEPART AS T2 ON T2.PARENT_ID = T1.ID WHERE T1.ID= 1;


/** 3、查询本部门用户归属机构和部门 **/
SELECT U.ID, U.USERNAME, D.`NAME` AS DEPART_NAME , O.`NAME` AS OFFICE_NAME  
FROM SYSTEM_USER AS U
INNER JOIN SYSTEM_DEPART AS D ON D.ID = U.SYSTEM_DEPART_ID
-- INNER JOIN SYSTEM_OFFICE_DEPART AS OD ON OD.SYSTEM_DEPART_ID = D.ID
INNER JOIN SYSTEM_OFFICE AS O ON O.ID = D.SYSTEM_OFFICE_ID
WHERE U.SYSTEM_DEPART_ID = 1;


/** 4、根据获取的子部门获取其所有的用户信息 **/
SELECT U.ID ,U.USERNAME FROM SYSTEM_USER AS U
WHERE U.SYSTEM_DEPART_ID IN (SELECT T2.ID FROM SYSTEM_DEPART AS T1 INNER JOIN SYSTEM_DEPART AS T2 ON T2.PARENT_ID = T1.ID WHERE T1.ID= 5);





/** 5、查询本部门包含子部门用户归属机构和部门(非递归) **/
SELECT U.ID, U.USERNAME, D.ID AS DEPART_ID, D.`NAME` AS DEPART_NAME, O.ID AS OFFICE_ID, O.`NAME` AS OFFICE_NAME FROM SYSTEM_USER AS U
INNER JOIN SYSTEM_DEPART AS D ON D.ID = U.SYSTEM_DEPART_ID
-- INNER JOIN SYSTEM_OFFICE_DEPART AS OD ON OD.SYSTEM_DEPART_ID = D.ID
INNER JOIN SYSTEM_OFFICE AS O ON O.ID = D.SYSTEM_OFFICE_ID
WHERE U.SYSTEM_DEPART_ID IN (SELECT T1.ID FROM SYSTEM_DEPART AS T1 WHERE (T1.ID= 1 OR T1.PARENT_ID = 1));


/** 6、根据本机构某个部门ID查询部门包含子部门用户归属机构和部门(递归) **/
SELECT U.ID, U.USERNAME, D.ID AS DEPART_ID, D.`NAME` AS DEPART_NAME, O.ID AS OFFICE_ID, O.`NAME` AS OFFICE_NAME  FROM SYSTEM_USER AS U
INNER JOIN SYSTEM_DEPART AS D ON D.ID = U.SYSTEM_DEPART_ID
-- INNER JOIN SYSTEM_OFFICE_DEPART AS OD ON OD.SYSTEM_DEPART_ID = D.ID
INNER JOIN SYSTEM_OFFICE AS O ON O.ID = D.SYSTEM_OFFICE_ID
WHERE U.SYSTEM_DEPART_ID IN (SELECT T1.ID from SYSTEM_DEPART AS T1 WHERE FIND_IN_SET(T1.ID, FN_DEPART_CHILD_LIST(5))) AND O.ID = 1;

/** 7、根据本机构某个部门ID查询部门包含子部门用户归属机构和部门(递归) **/

SELECT U.ID, U.USERNAME, D.ID AS DEPART_ID, D.`NAME` AS DEPART_NAME, P.ID AS POSITION_ID, P.`NAME` AS POSITION_NAME, O.ID AS OFFICE_ID, O.`NAME` AS OFFICE_NAME  FROM SYSTEM_USER AS U
INNER JOIN SYSTEM_POSTION AS P ON P.ID = U.SYSTEM_POSITION_ID
INNER JOIN SYSTEM_DEPART AS D ON D.ID = P.SYSTEM_DEPART_ID
INNER JOIN SYSTEM_OFFICE AS O ON O.ID = D.SYSTEM_OFFICE_ID
WHERE U.SYSTEM_DEPART_ID IN (SELECT T1.ID FROM SYSTEM_DEPART AS T1 WHERE FIND_IN_SET(T1.ID, FN_DEPART_CHILD_LIST(1))) AND O.ID = 1;




-- 查询部门子节点函数 --
DROP FUNCTION IF EXISTS FN_DEPART_CHILD_LIST;

CREATE FUNCTION FN_DEPART_CHILD_LIST(ROOT_ID INT) RETURNS VARCHAR(1000) #ROOT_ID为你要查询的节点
BEGIN

#声明两个临时变量
DECLARE TEMP VARCHAR(1000);
DECLARE TEMP_CHILD VARCHAR(1000);
SET TEMP = '$';
SET TEMP_CHILD=CAST(ROOT_ID AS CHAR);#把ROOTID强制转换为字符


WHILE TEMP_CHILD IS NOT NULL DO
SET TEMP = CONCAT(TEMP,',',TEMP_CHILD);#循环把所有节点连接成字符串。
SELECT GROUP_CONCAT(ID) INTO TEMP_CHILD FROM SYSTEM_DEPART WHERE FIND_IN_SET(PARENT_ID,TEMP_CHILD)>0 ;
END WHILE;
RETURN TEMP;

END


SELECT FN_DEPART_CHILD_LIST(1);

SELECT * FROM SYSTEM_DEPART AS T1 WHERE FIND_IN_SET(T1.ID, FN_DEPART_CHILD_LIST(1)); 



-- 查部门父集合 --
DROP FUNCTION FN_PARENT_LIST;

CREATE FUNCTION FN_PARENT_LIST(ROOT_ID INT) RETURNS varchar(1000)
BEGIN
#声明两个临时变量
DECLARE F_TEMP VARCHAR(1000);
DECLARE TEMP VARCHAR(1000);

SET F_TEMP = '$';
SET TEMP=CAST(ROOT_ID AS CHAR);#把ROOT_ID强制转换为字符
  
WHILE ROOT_ID is not null  do   
    SET F_TEMP =(SELECT parent_id FROM system_depart WHERE id = ROOT_ID);
    IF F_TEMP is not null THEN
        SET TEMP = CONCAT(TEMP, ',', F_TEMP);
        SET ROOT_ID = F_TEMP;
    ELSE
        SET ROOT_ID = F_TEMP;
    END IF;
END WHILE;
return TEMP;
END

select FN_PARENT_LIST(5);
  
select * from system_depart where FIND_IN_SET(id,FN_PARENT_LIST(1))   

